/*
 * MIT License
 * 
 * Copyright (c) 2020 Dennis Soungjin Park
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package comart.tools.jdbgen.ui;

import comart.tools.jdbgen.types.db.DBTable;
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author comart
 */
public class JDBTableView extends javax.swing.JDialog {
    
    private DBTable table;
    
    /**
     * Creates new form JDBTableView
     */
    public JDBTableView(java.awt.Frame parent, DBTable table) {
        super(parent, true);
        initComponents();
        this.table = table;
        lblTableName.setText(table.getTable());
        lblRemark.setText(table.getRemarks());

        tabColumns.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tabColumns.getColumnModel().getColumn(0).setPreferredWidth(50);
        tabColumns.getColumnModel().getColumn(1).setPreferredWidth(200);
        tabColumns.getColumnModel().getColumn(2).setPreferredWidth(150);
        tabColumns.getColumnModel().getColumn(3).setPreferredWidth(50);
        
        DefaultTableModel model = (DefaultTableModel)tabColumns.getModel();
        while (model.getRowCount() > 0)
            model.removeRow(0);
        
        //this.tabColumns.setModel(model);
        table.getColumns().forEach(c -> {
            List<Object> row = new ArrayList<>();
            row.add(c.getNo());
            row.add(c.getColumn());
            row.add(c.getTypeString());
            row.add(c.isKey());
            model.addRow(row.toArray());
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabColumns = new javax.swing.JTable();
        lblTableName = new javax.swing.JLabel();
        btnClose = new javax.swing.JButton();
        lblRemark = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tabColumns.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "#", "Name", "Type", "Key"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabColumns.getTableHeader().setReorderingAllowed(false);
        tabColumns.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                tabColumnsMouseMoved(evt);
            }
        });
        jScrollPane1.setViewportView(tabColumns);

        lblTableName.setFont(lblTableName.getFont().deriveFont(lblTableName.getFont().getStyle() | java.awt.Font.BOLD, lblTableName.getFont().getSize()+7));
        lblTableName.setText("Table name");

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        lblRemark.setText("Remarks");
        lblRemark.setAutoscrolls(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnClose))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTableName)
                        .addGap(18, 18, 18)
                        .addComponent(lblRemark, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTableName)
                    .addComponent(lblRemark))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void tabColumnsMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabColumnsMouseMoved
        // TODO add your handling code here:
        Point p = evt.getPoint();
        int row = tabColumns.rowAtPoint(p);
        tabColumns.setToolTipText(table.getColumns().get(row).getRemarks());
    }//GEN-LAST:event_tabColumnsMouseMoved


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblRemark;
    private javax.swing.JLabel lblTableName;
    private javax.swing.JTable tabColumns;
    // End of variables declaration//GEN-END:variables
}
